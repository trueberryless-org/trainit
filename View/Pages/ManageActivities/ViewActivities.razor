@page "/viewactivities"
@using Activity = Model.Entities.per_User.Activity

<PageTitle>Activity View</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="8">
                <div>
                    <h1 class="ms-4">Activities</h1>
                </div>

                <MudCardActions>
                    <MudIconButton OnClick="DateManager.PrevDate" Icon="@Icons.Material.Filled.ArrowBackIos" aria-label="previous day"></MudIconButton>
                    <MudDatePicker Label="Choose date" @ref="DateManager.DatePicker" @bind-Date="DateManager.SelectedDate" AutoClose="true" MaxDate="DateTime.Today" PickerVariant="PickerVariant.Dialog" class="mx-4">
                        <PickerActions Context="_">
                            <MudButton Class="mr-auto align-self-start" OnClick="DateManager.DatePickerToday">Today</MudButton>
                        </PickerActions>
                    </MudDatePicker>
                    <MudIconButton OnClick="DateManager.NextDate" Icon="@Icons.Material.Filled.ArrowForwardIos" Disabled="DateManager.MaxDateReached" aria-label="next day"></MudIconButton>
                </MudCardActions>
                <MudDivider/>
            </MudStack>

            <DataInit Data="Activities">
                <ChildContent Context="activities">
                    <MudPaper Elevation="3" Style="margin-block: 1rem; padding: 1rem; border-radius: 30px;">
                        <MudGrid>
                            <MudItem xs="4" Style="display: flex; align-items: center;">
                                <h3 class="ms-4">@activities.Count Entries</h3>
                            </MudItem>
                            <MudItem xs="8" Style="display: flex; align-items: center; justify-content: end">
                                <MudIconButton OnClick="ExpandAll" Icon="@Icons.Material.Rounded.ArrowDropDownCircle" Color="Color.Secondary" aria-label="expand all" Class="expand-all-button"></MudIconButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <MudExpansionPanels @ref="_expansionPanels" Class="expansion-list" DisableBorders="true" MultiExpansion="@MultiExpand">
                        @foreach (var activity in activities)
                        {
                            <MudExpansionPanel Class="expansion-list-item">
                                <TitleContent>
                                    <MudGrid>
                                        <MudItem xs="12" Style="display: flex; align-items: center;">
                                            @activity.Exercise.Name
                                        </MudItem>
                                    </MudGrid>
                                </TitleContent>
                                <ChildContent>
                                    <MudGrid>
                                        <MudItem xs="3" Style="display: flex; align-items: center;">
                                            @Math.Round(activity.Weight, 2) kg
                                        </MudItem>
                                        <MudItem xs="3" Style="display: flex; align-items: center;">
                                            @(activity.Set) Sets
                                        </MudItem>
                                        <MudItem xs="4" Style="display: flex; align-items: center;">
                                            @(activity.Repetition) Repetitions
                                        </MudItem>
                                        <MudItem xs="2" Style="display: flex; align-items: center; justify-content: end">
                                            <MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Secondary" OnClick="() => EditActivity(activity.Id)"/>
                                        </MudItem>
                                    </MudGrid>
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>

                </ChildContent>
            </DataInit>

        </MudContainer>

        <div Style="position: fixed; bottom: 13vh; right: 2vh; display: grid; gap: 1rem;">
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="NewActivity"/>
        </div>
    </Authorized>
    <NotAuthorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="4">
                <h1 class="ms-4 mb-12">You are not logged in!</h1>

                <MudPaper class="pa-4" Elevation="3">
                    <div>Please click <a href="@NavigationProvider["Login"].Link" style="color: yellow;">here</a> in order to get redirected to the Log In site!</div>
                </MudPaper>

            </MudStack>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public MainLayout? MainLayout { get; set; }

    List<Activity> Activities { get; set; }

    private async Task ReloadActivities()
    {
        if (!UserService.IsAuthenticated().Result) return;
        if (DateManager.SelectedDate == null || !DateManager.SelectedDate.HasValue) return;

        Activities = await ActivityRepository.GetActivitiesByUserByDate(UserService.CurrentUser.Id, DateManager.SelectedDate.Value);
        StateHasChanged();

        Console.WriteLine("Activity - Reload Completed");
        Console.WriteLine(DateManager.SelectedDate.Value);
        Console.WriteLine(Activities.Count);
        Console.WriteLine(string.Join(", ", Activities.Select(a => a.Exercise.Name)));
    }

    private void EditActivity(int activityId)
    {
        NavigationManager.NavigateTo($"{NavigationProvider["EditActivity"].Link}/{activityId}");
    }

    private void NewActivity()
    {
        NavigationManager.NavigateTo(NavigationProvider["NewActivity"].Link);
    }

    protected override async Task OnInitializedAsync()
    {
        if (!await UserService.IsAuthenticated()) return;

        await ReloadActivities();

        EventProvider.RegisterSelectedDateChanged(new EventCallback(this, (Func<Task>)ReloadActivities));

        Console.WriteLine("Activity");
    }


    private MudExpansionPanels? _expansionPanels;
    private bool MultiExpand = false;

    private void ExpandAll()
    {
        MultiExpand = !MultiExpand;
        if (MultiExpand)
            _expansionPanels.ExpandAll();
        else
            _expansionPanels.CollapseAll();
        StateHasChanged();
    }

}

@if (MultiExpand)
{
    <style>
        .expand-all-button {
            transform: rotate(-180deg);
        }
    </style>
}

<style>
    .expand-all-button {
        transition: transform 300ms ease-in-out;
    }

    .expansion-list {
        margin-top: .5rem;
    }
    
    .expansion-list-item {   
        padding: 0;
        border-radius: 3px;
        margin-bottom: 0 !important;
        transition: all 300ms ease-in-out;
    }
    
    .expansion-list-item:not(:first-of-type) {
        margin-top: .3rem;
    }
    
    .expansion-list-item:first-of-type {
        border-top-left-radius: 20px;
        border-top-right-radius: 20px;
    }
    
    .expansion-list-item:last-of-type {
        border-bottom-left-radius: 20px;
        border-bottom-right-radius: 20px;
    }
    
    .expansion-list-item.mud-panel-expanded {
        margin-block: .5rem !important;    
    }
           
    
    .expansion-list-item:first-of-type.mud-panel-expanded {
        border-bottom-left-radius: 15px !important;
        border-bottom-right-radius: 15px !important;
    }
    
    .expansion-list-item:not(:first-of-type):not(:last-of-type).mud-panel-expanded {
        border-radius: 15px !important;
    }
        
    .expansion-list-item:last-of-type.mud-panel-expanded {
        border-top-left-radius: 15px !important;
        border-top-right-radius: 15px !important;
    }
    
    .expansion-list-item:has(+ .mud-panel-expanded) {
        border-bottom-left-radius: 15px !important;
        border-bottom-right-radius: 15px !important;
    }
    
    .mud-panel-expanded + .expansion-list-item {
        border-top-left-radius: 15px !important;
        border-top-right-radius: 15px !important;
    }
    
    .mud-expand-panel-content {
        padding: 0 1rem 1rem 1.5rem !important;
    }
    
    .mud-expand-panel-header .mud-expand-panel-text {
        transition: all 300ms ease-in-out;
    }
    
    .mud-panel-expanded .mud-expand-panel-header .mud-expand-panel-text {
        font-weight: 900;
        font-size: 1.5rem;
        margin-top: .5rem;
    }
</style>

@if (!MultiExpand)
{
    <style>
        .expansion-list-item.mud-panel-expanded {
            border: 3px @(ThemeProvider.Theme.Palette.Secondary) solid;
        }
    </style>
}